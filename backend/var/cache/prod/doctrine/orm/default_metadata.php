<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Image__CLASSMETADATA__' => 0,
'App__Entity__User__CLASSMETADATA__' => 1,
'App__Entity__Notification__CLASSMETADATA__' => 2,
'App__Entity__Exchange__CLASSMETADATA__' => 3,
'App__Entity__Item__CLASSMETADATA__' => 4,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Image',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ImageRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'path' => $o[2],
                        'isProfileMain' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'path' => 'path',
                        'is_profile_main' => 'isProfileMain',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'path' => 'path',
                        'isProfileMain' => 'is_profile_main',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'image',
                    ],
                ],
                'associationMappings' => [
                    [
                        'item' => $o[4],
                        'user' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Image',
                    5 => 'item_id',
                    7 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'path',
                    'isProfileMain',
                ],
                'columnName' => [
                    1 => 'id',
                    'path',
                    'is_profile_main',
                ],
                'length' => [
                    2 => 255,
                ],
                'options' => [
                    3 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Image',
                    6 => 'App\\Entity\\Image',
                ],
                'inversedBy' => [
                    4 => 'images',
                    6 => 'profileImages',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'item_id' => 'id',
                    ],
                    6 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'item_id',
                    ],
                    6 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'item_id' => 'item_id',
                    ],
                    6 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'item',
                    6 => 'user',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Item',
                    6 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'roles' => $o[3],
                        'password' => $o[4],
                        'name' => $o[5],
                        'surnames' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'name' => 'name',
                        'surnames' => 'surnames',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'name' => 'name',
                        'surnames' => 'surnames',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user',
                        'uniqueConstraints' => [
                            'UNIQ_IDENTIFIER_EMAIL' => [
                                'fields' => [
                                    'email',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'items' => $o[7],
                        'profileImages' => $o[8],
                        'requestedExchanges' => $o[9],
                        'ownedExchanges' => $o[10],
                        'notifications' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'json',
                    'string',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'name',
                    'surnames',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'name',
                    'surnames',
                ],
                'length' => [
                    2 => 180,
                    5 => 20,
                    30,
                ],
                'fetch' => [
                    7 => 2,
                    2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'mappedBy' => [
                    7 => 'owner',
                    'user',
                    'requester',
                    'owner',
                    'user',
                ],
                'cascade' => [
                    8 => [
                        'remove',
                    ],
                    11 => [
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    8 => true,
                    11 => true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'items',
                    'profileImages',
                    'requestedExchanges',
                    'ownedExchanges',
                    'notifications',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Item',
                    'App\\Entity\\Image',
                    'App\\Entity\\Exchange',
                    'App\\Entity\\Exchange',
                    'App\\Entity\\Notification',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Notification',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\NotificationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'message' => $o[2],
                        'createdAt' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'notification',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Notification',
                    5 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'message',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'message',
                    'created_at',
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Notification',
                ],
                'inversedBy' => [
                    4 => 'notifications',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                ],
                'nullable' => [
                    5 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'user',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Exchange',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ExchangeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'status' => $o[2],
                        'createdAt' => $o[3],
                        'updatedAt' => $o[4],
                        'message' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                        'message' => 'message',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                        'message' => 'message',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'exchange',
                    ],
                ],
                'associationMappings' => [
                    [
                        'requester' => $o[6],
                        'owner' => $o[8],
                        'requestedItem' => $o[10],
                        'offeredItem' => $o[12],
                    ],
                ],
                'idGenerator' => [
                    $o[14],
                ],
                'name' => [
                    'App\\Entity\\Exchange',
                    7 => 'requester_id',
                    9 => 'owner_id',
                    11 => 'requested_item_id',
                    13 => 'offered_item_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'text',
                ],
                'fieldName' => [
                    1 => 'id',
                    'status',
                    'createdAt',
                    'updatedAt',
                    'message',
                ],
                'columnName' => [
                    1 => 'id',
                    'status',
                    'created_at',
                    'updated_at',
                    'message',
                ],
                'length' => [
                    2 => 20,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    9 => false,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                    12 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Exchange',
                    8 => 'App\\Entity\\Exchange',
                    10 => 'App\\Entity\\Exchange',
                    12 => 'App\\Entity\\Exchange',
                ],
                'inversedBy' => [
                    6 => 'requestedExchanges',
                    8 => 'ownedExchanges',
                    10 => 'requestedInExchanges',
                    12 => 'offeredInExchanges',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'requester_id' => 'id',
                    ],
                    8 => [
                        'owner_id' => 'id',
                    ],
                    10 => [
                        'requested_item_id' => 'id',
                    ],
                    12 => [
                        'offered_item_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'requester_id',
                    ],
                    8 => [
                        'id' => 'owner_id',
                    ],
                    10 => [
                        'id' => 'requested_item_id',
                    ],
                    12 => [
                        'id' => 'offered_item_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                    12 => [
                        $o[13],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'requester_id' => 'requester_id',
                    ],
                    8 => [
                        'owner_id' => 'owner_id',
                    ],
                    10 => [
                        'requested_item_id' => 'requested_item_id',
                    ],
                    12 => [
                        'offered_item_id' => 'offered_item_id',
                    ],
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                    13 => 'id',
                ],
                'unique' => [
                    9 => false,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'requester',
                    8 => 'owner',
                    10 => 'requestedItem',
                    12 => 'offeredItem',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\User',
                    8 => 'App\\Entity\\User',
                    10 => 'App\\Entity\\Item',
                    12 => 'App\\Entity\\Item',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Item',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ItemRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'category' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'category' => 'category',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'category' => 'category',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'item',
                    ],
                ],
                'associationMappings' => [
                    [
                        'owner' => $o[5],
                        'requestedInExchanges' => $o[7],
                        'offeredInExchanges' => $o[8],
                        'images' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Item',
                    6 => 'owner_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'category',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'category',
                ],
                'length' => [
                    2 => 100,
                    255,
                    50,
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Item',
                    7 => 'App\\Entity\\Item',
                    'App\\Entity\\Item',
                    'App\\Entity\\Item',
                ],
                'inversedBy' => [
                    5 => 'items',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'owner_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'owner_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'owner_id' => 'owner_id',
                    ],
                ],
                'unique' => [
                    6 => false,
                ],
                'nullable' => [
                    6 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
                'cascade' => [
                    7 => [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                    [
                        'remove',
                    ],
                ],
                'mappedBy' => [
                    7 => 'requestedItem',
                    'offeredItem',
                    'item',
                ],
                'orphanRemoval' => [
                    9 => true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'owner',
                    7 => 'requestedInExchanges',
                    'offeredInExchanges',
                    'images',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\User',
                    7 => 'App\\Entity\\Exchange',
                    'App\\Entity\\Exchange',
                    'App\\Entity\\Image',
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
